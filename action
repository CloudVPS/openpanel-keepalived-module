#!/bin/bash
. /var/openpanel/api/sh/module.sh
. /var/openpanel/modules/Keepalived.module/localfunctions.sh

Module.getconfig() {
    ROUTERID=$(hostname -f)
  cat << _EOF_
  <openpanel.module>
    <dict id="Keepalived" type="class">
      <dict id="keepalived" type="object">
        <string id="uuid">6b7e4f9e-033a-452a-975c-c6e1a6f16699</string>
        <enum id="master_slave">master</enum>
        <string id="router_id">${ROUTERID}</string
      </dict>
    </dict>
    <dict id="OpenCORE:Result">
      <integer id="error">0</integer>
      <string id="message">OK</string>
    </dict>
  </openpanel.module>
_EOF_
  exitquiet
}

Module.create() {
    m_s=$(coreval Keepalived master_slave)

    [ "${m_s}" = "slave" ] && exiterror "You can not create objects on a slave"

    Module.update

    exitok
}

Module.update() {
    m_s=$(coreval Keepalived master_slave)

    external_iface=$(coreval Keepalived external_iface)
    syncd_iface=$(coreval Keepalived syncd_iface)
    nat_gw_ip=$(coreval Keepalived nat_gw_ip)
    vrrp_ip=$(coreval Keepalived vrrp_ip)
    notification_email=$(coreval Keepalived notifications)
    smtp_server=$(coreval Keepalived smtp_server)
    router_id=$(coreval Keepalived router_id)

    IPTABLESDIR=/etc/openpanel/iptables.d
    echo  '$IPTABLES -A openpanel -p vrrp -j openpanel-allow' > open-vrrp.inc

    if [ "${m_s}" = "slave" ]; then
        echo "slave" > active_slave
        echo "${external_iface}" > external_iface
        echo "${syncd_iface}" > syncd_iface
        echo "${notification_email}" > notifications
        echo "${smtp_server}" > smtp_server
        echo "${router_id}" > routerid
        authd installfile active_slave /etc/openpanel/ha
        authd installfile external_iface /etc/openpanel/ha
        authd installfile syncd_iface /etc/openpanel/ha
        authd installfile notifications /etc/openpanel/ha
        authd installfile smtp_server /etc/openpanel/ha
        authd installfile routerid /etc/openpanel/ha

        authd installfile open-vrrp.inc ${IPTABLESDIR}
        authd runscript iptables-update

        exitok
    else
        authd deletefile /etc/openpanel/ha/active_slave
    fi 
    
    GLOBAL_DEFS=$(_create_global)
    DOFWRELOAD="false"
    VIPCONF=""
    STATICS=""
    VRRPS=""
    :>keepalived_template.conf
    :>authorized_keys

    for uuid in `coreval --loop Keepalived Keepalived:Slaves`; do
        ipaddr=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_ip)
        key=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_key)
        descr=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_description)

        echo -e "#${descr}:\nfrom=\"${ipaddr}\" ${key}" > authorized_keys
    done

    [ -s authorized_keys ] && authd installfile authorized_keys /etc/openpanel/ha/.ssh/
    [ -s authorized_keys ] || authd deletefile /etc/openpanel/ha/.ssh/authorized_keys
    [ -s authorized_keys -a "X${syncd_iface}" = "X" ] && exiterror "You need to configure the syncd interface for VRRP to work"
    [ -s authorized_keys -a "X${nat_gw_ip}" = "X" ] && exiterror "You need to configure the NAT GW IP for VRRP to work"

    [ "X${nat_gw_ip}" = "X" ] || VRRPS="${VRRPS} ${nat_gw_ip}"
    [ "X${vrrp_ip}" = "X" ] || VRRPS="${VRRPS} ${vrrp_ip}/?"

    for uuid in `coreval --loop Keepalived Keepalived:RSPool`; do
        for slbuuid in `coreval --loop Keepalived Keepalived:RSPool ${uuid} Keepalived:SLBMaster`; do
            VIP_ENABLED=$(coreval Keepalived Keepalived:RSPool ${uuid} Keepalived:SLBMaster ${slbuuid} vip_enabled)
            [ "${VIP_ENABLED}" = "false" ] && continue;

            VIP_IP=$(_create_vip_static ${uuid} ${slbuuid}) || exiterror "${VIP_IP}"
            echo ${VIP_IP} | grep -q : && VIP_TYPE="v6" || VIP_TYPE="v4"

            VIP=$(_create_vip ${uuid} ${slbuuid} ${VIP_TYPE})
            echo "${VIP}" | grep -q "ssport" && exiterror "If you enter a sorry server, you must also enter the port"
            echo "${VIP}" | grep -q "pg_v4" && exiterror "Granularity should be between 1 and 32"
            echo "${VIP}" | grep -q "pg_v6" && exiterror "Granularity should be between 1 and 128"

            VHOST=$(_get_vip_vhost ${uuid} ${slbuuid})
            POOL=$(_create_pool ${uuid} ${VHOST} ${VIP_TYPE})
            echo "${POOL}" | grep -q "mix46" && exiterror "You cannot mix IPv4 and IPv6 Front- and Back-end IPs"
            echo "${POOL}" | grep -q "nohash$" && exiterror "Could not create a hash of the URL to check (is the server alive?)"
            [ "${POOL}" = "" ] && continue

            [ -s authorized_keys ] || STATICS="${STATICS} ${VIP_IP}"
            [ -s authorized_keys ] && VRRPS="${VRRPS} ${VIP_IP}"
            VIPCONF="${VIPCONF}\n${VIP}\n${POOL}\n}"
        done
    done

    [ "X${STATICS}" = "X" ] || STATICCONF=$(_create_statics "${STATICS}")
    [ "X${VRRPS}" = "X" ]   || VRRPCONF=$(_create_vrrp "${VRRPS}")

    echo "${GLOBAL_DEFS}" >> keepalived_template.conf
    [ "X${STATICCONF}" = "X" ] || echo -e "${STATICCONF}" >> keepalived_template.conf
    [ "X${VRRPCONF}" = "X" ]   || echo -e "${VRRPCONF}" >> keepalived_template.conf
    [ "X${VIPCONF}" = "X" ]    || echo -e "${VIPCONF}" >> keepalived_template.conf

    cat keepalived_template.conf | \
        sed -e "s/@EXTINTF@/${external_iface}/" | \
        sed -e "s/@SYNCINTF@/${syncd_iface}/"   | \
        sed -e "s/@NOTIFICATIONS@/${notification_email}/"   | \
        sed -e "s/@ROUTERID@/${router_id}/"   | \
        sed -e "s/@SMTP_SERVER@/${smtp_server}/"   | \
        sed -e "s/@PRIO@/100/" > keepalived.conf
    authd installfile keepalived.conf /etc/keepalived/
    authd installfile keepalived_template.conf /etc/keepalived/

    if [ -d ${IPTABLESDIR} ]; then
        if [ "X${VRRPCONF}" = "X" -a -f ${IPTABLESDIR}/open-vrrp.inc ]; then
            authd deletefile ${IPTABLESDIR}/open-vrrp.inc
            DOFWRELOAD="true"
        elif [ "X${VRRPCONF}" != "X" -a ! -f ${IPTABLESDIR}/open-vrrp.inc ]; then
            authd installfile open-vrrp.inc ${IPTABLESDIR}
            DOFWRELOAD="true"
        fi
        [ "${DOFWRELOAD}" = "true" ] && authd runscript iptables-update
    fi

    [ "X${nat_gw_ip}" = "X" ] || authd runscript keepalived-enable-gw-nat ${nat_gw_ip} ${external_iface} ${syncd_iface}
    [ "X${nat_gw_ip}" = "X" ] && authd runscript keepalived-disable-gw-nat
    authd reloadservice keepalived

    authd runscript openpanel-keepalived-status > /var/openpanel/http/modules/keepalived/keepalived-status.html

    exitok
}

Module.delete() {
    Module.update
    exitok
}

Keepalived:Slave.listobjects() {
    if [ ! -f /etc/openpanel/ha/id_rsa ]; then
        rm -f id_rsa id_rsa.pub 
        ssh-keygen -f ./id_rsa -t rsa -q -N ""
        authd installfile id_rsa /etc/openpanel/ha
        authd installfile id_rsa.pub /etc/openpanel/ha
    fi

    slave_prio=$(cat /etc/openpanel/ha/prio)
    slave_master_ip=$(cat /etc/openpanel/ha/slave_master_ip)
    slave_key=$(cat /etc/openpanel/ha/id_rsa.pub)
    
    cat << _EOF_
<?xml version="1.0" encoding="UTF-8"?>
<dict>
  <dict id="objects">
    <dict id="Keepalived:Slave" type="class">
      <dict id="kslave" type="object">
        <string id="slave_prio">${slave_prio}</string>
        <string id="slave_master_ip">${slave_master_ip}</string>
        <textarea id="slave_key">${slave_key}</textarea>
	<string id="class">Keepalived:Slave</string>
      </dict>
    </dict>
  </dict>
  <dict id="OpenCORE:Result">
    <integer id="error">0</integer>
    <string id="message">OK</string>
  </dict>
</dict>
_EOF_

    exitok
}

Keepalived:Slave.update() {
    slave_prio=$(coreval Keepalived:Slave slave_prio)
    slave_master_ip=$(coreval Keepalived:Slave slave_master_ip)
    slave_key=$(coreval Keepalived:Slave slave_key)
    m_s=$(coreval Keepalived master_slave)

    echo ${slave_prio} > prio
    echo ${slave_master_ip} > slave_master_ip

    authd installfile prio /etc/openpanel/ha
    authd installfile slave_master_ip /etc/openpanel/ha

    [ "${m_s}" = "slave" ] && authd runscript keepalived-fetch-master-settings || exiterror "We failed to fetch the master settings"
    authd runscript openpanel-keepalived-status > /var/openpanel/http/modules/keepalived/keepalived-status.html

    exitok
}

Keepalived:Status.delete() {
    exiterror "You cannot delete this bogus object"
}

Keepalived:Status.listobjects() {
    link="<iframe src=\"/modules/keepalived/keepalived-status.html\" style=\"width: 600px; height: 1000px; border: 0px;\"></iframe>"
    link=$(echo ${link} | sed -e 's/</\&lt;/g' | sed -e 's/>/\&gt;/g')
  cat << _EOF_
<?xml version="1.0" encoding="UTF-8"?>
<dict>
  <dict id="objects">
    <dict id="Keepalived:Status" type="class">
      <dict id="statuslink" type="object">
        <string id="status">${link}</string>
        <string id="class">Keepalived:Status</string>
      </dict>
    </dict>
  </dict>
  <dict id="OpenCORE:Result">
    <integer id="error">0</integer>
    <string id="message">OK</string>
  </dict>
</dict>
_EOF_
  exitquiet
}

implement Keepalived.module
