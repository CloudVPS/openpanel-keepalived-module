#!/bin/bash
. /var/openpanel/api/sh/module.sh
. /var/openpanel/modules/Keepalived.module/localfunctions.sh

Module.getconfig() {
    ROUTERID=$(hostname -f)
  cat << _EOF_
  <openpanel.module>
    <dict id="Keepalived" type="class">
      <dict id="keepalived" type="object">
        <enum id="master_slave">master</enum>
        <string id="router_id">${ROUTERID}</string
      </dict>
    </dict>
    <dict id="OpenCORE:Result">
      <integer id="error">0</integer>
      <string id="message">OK</string>
    </dict>
  </openpanel.module>
_EOF_
  exitquiet
}

Module.create() {
    m_s=$(coreval Keepalived master_slave)

    [ "${m_s}" = "slave" ] && exiterror "You can not create objects on a slave"

    Module.update

    exitok
}

Module.update() {
    m_s=$(coreval Keepalived master_slave)

    if [ "${m_s}" = "slave" ]; then
        echo "slave" > active_slave
        authd installfile active_slave /etc/openpanel/ha
        exitok
    else
        authd deletefile /etc/openpanel/ha/active_slave
    fi 
    
    external_iface=$(coreval Keepalived external_iface)
    syncd_iface=$(coreval Keepalived syncd_iface)

    GLOBAL_DEFS=$(_create_global)
    VIPCONF=""
    STATICS=""
    VRRPS=""
    :>keepalived_template.conf
    :>authorized_keys

    for uuid in `coreval --loop Keepalived Keepalived:Slaves`; do
        ipaddr=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_ip)
        key=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_key)
        descr=$(coreval Keepalived Keepalived:Slaves ${uuid} slave_description)

        echo -e "#${descr}:\nfrom=\"${ipaddr}\" ${key}" >> authorized_keys
    done

    [ -s authorized_keys ] && authd installfile authorized_keys /etc/openpanel/ha/.ssh/
    [ -s authorized_keys ] || authd deletefile /etc/openpanel/ha/.ssh/authorized_keys
    [ -s authorized_keys -a "X${syncd_iface}" = "X" ] && exiterror "You need to configure the syncd interface for VRRP to work"

    for uuid in `coreval --loop Keepalived Keepalived:RSPool`; do
        for slbuuid in `coreval --loop Keepalived Keepalived:RSPool ${uuid} Keepalived:SLBMaster`; do
            [ -s authorized_keys ] || STATIC=$(_create_vip_static ${uuid} ${slbuuid})
            [ -s authorized_keys ] && VRRP=$(_create_vip_static ${uuid} ${slbuuid})

            [ "X${STATIC}" = "X" ]   || STATICS="${STATICS} ${STATIC}"
            [ "X${VRRP}" = "X" ]   || VRRPS="${VRRPS} ${VRRP}"

            VIP=$(_create_vip ${uuid} ${slbuuid})
            VHOST=$(_get_vip_vhost ${uuid} ${slbuuid})
            POOL=$(_create_pool ${uuid} ${VHOST})
            echo "${POOL}" | grep -q "nohash$" && exiterror "Could not create a hash of the URL to check (is the server alive?)"
            VIPCONF="${VIPCONF}\n${VIP}\n${POOL}\n}"
        done
    done

    [ "X${STATICS}" = "X" ] || STATICCONF=$(_create_statics "${STATICS}")
    [ "X${VRRPS}" = "X" ]   || VRRPCONF=$(_create_vrrp "${VRRPS}")

    echo "${GLOBAL_DEFS}" >> keepalived_template.conf
    [ "X${STATICCONF}" = "X" ] || echo -e "${STATICCONF}" >> keepalived_template.conf
    [ "X${VRRPCONF}" = "X" ]   || echo -e "${VRRPCONF}" >> keepalived_template.conf
    echo -e "${VIPCONF}" >> keepalived_template.conf

    cat keepalived_template.conf | \
        sed -e 's/@STATE@/MASTER/' \
        sed -e "s/@EXTINTF@/${external_iface}/" \
        sed -e "s/@SYNCINTF@/${syncd_iface}/"   \
        sed -e "s/@PRIO@/100/" > keepalived.conf
    authd installfile keepalived.conf /etc/keepalived/

#    authd reloadservice keepalived
    exitok
}

Module.delete() {
    Module.update
    exitok
}

Keepalived:Slave.listobjects() {
    if [ ! -f /etc/openpanel/ha/id_rsa ]; then
        rm -f id_rsa id_rsa.pub 
        ssh-keygen -f ./id_rsa -t rsa -q -N ""
        authd installfile id_rsa /etc/openpanel/ha
        authd installfile id_rsa.pub /etc/openpanel/ha
    fi

    slave_prio=$(cat /etc/openpanel/ha/prio)
    slave_master_ip=$(cat /etc/openpanel/ha/slave_master_ip)
    slave_key=$(cat /etc/openpanel/ha/id_rsa.pub)
    
    cat << _EOF_
<?xml version="1.0" encoding="UTF-8"?>
<dict>
  <dict id="objects">
    <dict id="Keepalived:Slave" type="class">
      <dict id="kslave" type="object">
        <string id="slave_prio">${slave_prio}</string>
        <string id="slave_master_ip">${slave_master_ip}</string>
        <textarea id="slave_key">${slave_key}</textarea>
	<string id="class">Keepalived:Slave</string>
      </dict>
    </dict>
  </dict>
  <dict id="OpenCORE:Result">
    <integer id="error">0</integer>
    <string id="message">OK</string>
  </dict>
</dict>
_EOF_

    exitok
}

Keepalived:Slave.update() {
    slave_prio=$(coreval Keepalived:Slave slave_prio)
    slave_master_ip=$(coreval Keepalived:Slave slave_master_ip)
    slave_key=$(coreval Keepalived:Slave slave_key)

    echo ${slave_prio} > prio
    echo ${slave_master_ip} > slave_master_ip

    authd installfile prio /etc/openpanel/ha
    authd installfile slave_master_ip /etc/openpanel/ha

    exitok
}

implement Keepalived.module
